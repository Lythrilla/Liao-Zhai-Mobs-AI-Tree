name: Build and Publish

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'  # 当推送版本标签时触发
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有历史提交，用于版本号生成

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          npm install
          # 确保使用最新版本的@xyflow/react
          npm install @xyflow/react@latest
          # 安装path-browserify解决构建问题
          npm install --save path-browserify
          # 为Electron项目安装额外依赖
          npm install --save electron-is-dev electron-builder

      - name: List installed packages
        run: npm list --depth=0

      - name: Update React Flow import in files
        run: |
          echo "更新项目中的React Flow导入语句"
          find src -type f -name "*.jsx" -o -name "*.js" -exec sed -i 's/react-flow-renderer/@xyflow\/react/g' {} \;
          find src -type f -name "*.jsx" -o -name "*.js" -exec sed -i 's/reactflow/@xyflow\/react/g' {} \;

      - name: Create Webpack config override
        run: |
          cat > config-overrides.js << EOL
          const path = require('path');
          
          module.exports = function override(config, env) {
            // 添加fallback以解决path-browserify问题
            config.resolve.fallback = {
              ...config.resolve.fallback,
              "path": require.resolve("path-browserify"),
              "os": require.resolve("os-browserify/browser"),
              "fs": false,
              "stream": require.resolve("stream-browserify"),
              "crypto": require.resolve("crypto-browserify")
            };
            
            return config;
          }
          EOL
          
          # 安装其他可能需要的polyfill
          npm install --save os-browserify stream-browserify crypto-browserify
          
          # 修改package.json，使用react-app-rewired
          npm install --save-dev react-app-rewired
          node -e "
            const pkg = require('./package.json');
            pkg.scripts.build = 'react-app-rewired build';
            pkg.scripts.start = 'react-app-rewired start';
            pkg.scripts.test = 'react-app-rewired test';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Build project
        run: npm run build

      - name: Create version info
        run: |
          echo "构建时间: $(date)" > build_info.txt
          echo "Git Commit: ${{ github.sha }}" >> build_info.txt
          echo "Node.js版本: $(node -v)" >> build_info.txt
          echo "@xyflow/react版本: $(npm list @xyflow/react | grep @xyflow/react)" >> build_info.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/
            build_info.txt
          retention-days: 7
          
      # 自动生成版本号（仅在主分支上运行且不是发布标签时）
      - name: Automatic versioning
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && !startsWith(github.ref, 'refs/tags/')
        id: versioning
        run: |
          # 从package.json获取当前版本
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "当前版本: $CURRENT_VERSION"
          
          # 自动增加修订号
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
          echo "新版本: $NEW_VERSION"
          
          # 更新package.json中的版本号
          npm version $NEW_VERSION --no-git-tag-version
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      # 准备发布到NPM
      - name: Prepare NPM package
        run: |
          mkdir -p dist
          # 确保包含所有需要发布的文件
          cp -r build/ dist/
          cp package.json dist/
          
          # 创建一个简单的README
          echo "# 聊斋行为树编辑器" > dist/README.md
          echo "" >> dist/README.md
          echo "基于最新版@xyflow/react的行为树可视化编辑器。" >> dist/README.md
          
          # 创建一个专门用于发布的package.json
          node -e "
            const pkg = require('./package.json');
            delete pkg.devDependencies;
            delete pkg.scripts;
            pkg.main = 'index.js';
            require('fs').writeFileSync('./dist/package.json', JSON.stringify(pkg, null, 2));
          "
      
      # 发布到NPM（仅在主分支或有标签时）
      - name: Publish to NPM
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
        run: |
          cd dist
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      # 如果是自动版本更新，创建一个标签
      - name: Create Git tag
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && !startsWith(github.ref, 'refs/tags/')
        run: |
          NEW_VERSION=${{ steps.versioning.outputs.version }}
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION" 